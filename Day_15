#Concurrent code
import time

def fun(seconds):
    print(f"Sleeping for {seconds} seconds")
    time.sleep(seconds)
fun(4)
fun(1)
fun(0)



#Multi threading - does work parallely
import threading
import time
def fun1(seconds):
    print(f"Sleeping for {seconds}secs")
    time.sleep(seconds)

t1 = threading.Thread(target=fun1, args = [2]) #this function creates a new thread that runs the target function with the specified args.
t2 = threading.Thread(target=fun1, args = [4])
t3 = threading.Thread(target=fun1, args = [5])

t1.start()
t2.start()
t3.start()



#Using join() to stop the function and also calculating total time using performance counter
import threading
import time
def fun2(seconds):
    print(f"Sleeping for {seconds}secs")
    time.sleep(seconds)

time1 = time.perf_counter()

t1 = threading.Thread(target=fun1, args = [1])
t2 = threading.Thread(target=fun1, args = [2])
t3 = threading.Thread(target=fun1, args = [3])

t1.start()
t2.start()
t3.start()

t1.join()
t2.join()
t3.join()
time2 = time.perf_counter()
print(time2 - time1)



#Concurrent.futures (ThreadPoolExecutor)
import threading
import time
from concurrent.futures import ThreadPoolExecutor
def fun2(seconds):
    print(f"Sleeping for {seconds}secs")
    time.sleep(seconds)

def main():
    time1 = time.perf_counter()

    t1 = threading.Thread(target=fun1, args = [1])
    t2 = threading.Thread(target=fun1, args = [2])
    t3 = threading.Thread(target=fun1, args = [3])

    t1.start()
    t2.start()
    t3.start()

    t1.join()
    t2.join()
    t3.join()
    time2 = time.perf_counter()
    print(time2 - time1)

def poolingDemo():
    with ThreadPoolExecutor() as executor:
        future1 = executor.submit(fun2,3)
        print(future1.result())
        future2 = executor.submit(fun2,2)
        print(future2.result())
        future3 = executor.submit(fun2,4)
        print(future3.result())

poolingDemo()



#We can execute ThreadPoolExecutor using map functions too.
import threading
import time
from concurrent.futures import ThreadPoolExecutor
def fun3(seconds):
    print(f"Sleeping for {seconds}secs")
    time.sleep(seconds)
    return seconds

def main():
    time1 = time.perf_counter()

    t1 = threading.Thread(target=fun1, args = [1])
    t2 = threading.Thread(target=fun1, args = [2])
    t3 = threading.Thread(target=fun1, args = [3])

    t1.start()
    t2.start()
    t3.start()

    time2 = time.perf_counter()
    print(time2 - time1)

def poolingDemo():
    with ThreadPoolExecutor() as executor:
      l = [1, 2, 3, 4, 5]
      results = executor.map(fun3,l)
      for result in results:
        print(result)

poolingDemo()



