#1
import threading
import time
from concurrent.futures import ThreadPoolExecutor

def fun(seconds):
    print(f"seconds{seconds}")
    time.sleep(seconds)

def poolingDemo():
    with ThreadPoolExecutor() as executor:
        future1 = executor.submit(fun,3)
        print(future1.result())
        future2 = executor.submit(fun,2)
        print(future2.result())
        future3 = executor.submit(fun,4)
        print(future3.result())

poolingDemo()



#2
import threading
import time
from concurrent.futures import ThreadPoolExecutor
def fun1(seconds):
    print(f"Sleeping for {seconds}secs")
    time.sleep(seconds)

def poolingDemo():
       with ThreadPoolExecutor() as executor:
         l = [1, 2, 3, 4, 5]
       results = executor.map(fun1,l)
       for result in results:
            print(result)

poolingDemo()


#3
import threading
import time
from concurrent.futures import ThreadPoolExecutor
def fun1(seconds):
    print(f"Sleeping for {seconds}secs")
    time.sleep(seconds)

def poolingDemo():
       with ThreadPoolExecutor() as executor:
         l = [4,7,3,6]
       results = executor.map(fun1,l)
       for result in results:
            print(result)

poolingDemo()

